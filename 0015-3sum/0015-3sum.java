// 문제 정의: 주어진 배열에서 3개의 요소의 합이 0인 요소들을 리스트로 묶어서, 포함한 리스트로 반환해라
// 시간 복잡도: O(N^2) 이내
// 문제 풀이
// 반복문 3개를 사용해서 O(N^3)으로 푸는 방법밖에 생각안난다. 

// 문제 접근을 어떤식으로 해야할까?
// 브루트포스로 풀면 N^3이 나온다. 따라서 N^2 이내로 풀어야한다.
// 배열에서 요소를 하나 지정해놓고 배열을 한번 순회해서 처리한다면 N^2이 걸릴수있다.

// 세 개를 고르는데 O(N³)이니까 줄일 수 있는 방법은 없을까?
// 하나는 고정하고 나머지 두 개를 O(N²)으로 찾을 수 있을까?
// 단, 두 개의 움직임은 배열 순회(N)내에서 움직어야한다.
// 기준점만 지정해놓으면, 투포인터를 사용해서 N^2 걸릴것을 N으로 줄일수있다.
// 그러나 주어진 배열에서 투포인터를 움직일수 있는 조건이 필요하다.
// 숫자들의 합이 0을 만족하는 수들을 구해야하므로 숫자의 합이 0보다 크다/작다로 두개의 포인터가 움직이는 것을 생각해볼수있다.
// 따라서 배열을 먼저 정렬된 상태여야 작다/크다 판단이 가능하다.

// 투포인터를 사용할려면, 배열을 먼저 정렬해야한다. 그래야 기준점을 기준으로 두개의 포인터가 조건에 따라 이동할수있다. 
// i 기준, j는 왼쪽 포인터, k는 오른쪽 포인터
// i를 기준으로, j와 k에서 합의 값이 0보다 작다면, j와 k중에서 작은 값을 이동한다.
// 반대로 j와 k에서 합의 값이 0보다 크다면, j와 k중에서 큰값을 이동한다.
// 답인 nums[i] + nums[j] + nums[k] == 0을 찾으면, 배열 리스트에 추가후 j와 k를 동시에 움직인다. j >= k되면, 다음 기준점으로 넘어긴다.
// 만일, j가 i랑 동일하다면 j만 이동시킨다.
// [-4, -1, 0, 1, 1, 2, 2, 3, 3]
import java.util.*;

class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> resultList = new ArrayList<>();
        Arrays.sort(nums); // 투포인터를 위해 정렬
        int n = nums.length;
        for (int i = 0; i < n - 2; i++) {
            // 기준점 중복 제거
            if (i > 0 && nums[i] == nums[i - 1]) continue;

            int j = i + 1;
            int k = n - 1;

            while (j < k) {
                int sum = nums[i] + nums[j] + nums[k];

                if (sum < 0) {
                    j++;
                } else if (sum > 0) {
                    k--;
                } else {
                    resultList.add(Arrays.asList(nums[i], nums[j], nums[k]));

                    // j 중복 제거
                    while (j < k && nums[j] == nums[j + 1]) j++;
                    // k 중복 제거
                    while (j < k && nums[k] == nums[k - 1]) k--;

                    j++;
                    k--;
                }
            }
        }
        return resultList;
    }
}
